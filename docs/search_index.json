[["building-an-experiment-with-psychopy.html", "Chapter 3 Building an experiment with PsychoPy 3.1 Create the Posner Task on Builder 3.2 Adding practice trials", " Chapter 3 Building an experiment with PsychoPy 3.1 Create the Posner Task on Builder Posner Cuing Task Participants will see a fixation cross in the middle and one box to the right and one box to the left. A cue will appear in one of the two boxes followed by a GO signal in either the same box as the cue (valid) or different place as the cue (invalid). Time duration for each segment is outlined in the picture below. Participants will be asked to decide as quickly and accurately as possible if they see the GO signal on the left by pressing the S key or the right box by pressing K key. There will be a total of 20 trials. Figure 3.1: Time duration for each component of posner task. If you are familiar with PsychoPy builder then stop here and try to create the experiment based on the description above. If not, move forward to see instructions on how to create this experiment. Before beginning, it’s helpful to know a little bit about how PsychoPy builder works. PsychoPy builder uses excel/csv files to read condtion variables while the builder interface is used for static components, and flow of your expeirment. In the excel file, each column represents a condition variable, and each row represents a trial. It’s best to create a separate folder for the experiment to contain all parts together (excel file, images, psyexp file) for consistency of pathways. 3.1.1 Excel Let’s start by creating the condition file on excel. For this task, we have three condition variables: condition type (valid, invalid), cue position (left, right), go signal position (left, right). We also have one extra column for the correct responses so we can track accuracy. The positions are represented in the units height, which scales everything relative to height of the window (best for online experiments). Figure 3.2: Condition file for Posner Cuing Task. 3.1.2 Builder Now that we have the condition file ready to go, we can create the other components of our routine through builder. Let’s break down the task into a timeline of events. 1. Fixation cross appears from 0s to end of trial We will use the Text component to create the fixation cross. The start of the stimuli is set at 0.0s and the duration is left blank to allow it to run until the end of trial. The spatial units should be set to heights, and the letter height needs to be adjusted from the default to 0.09 height units. Figure 3.3: Fixation cross properties on builder. 2. Two box appears 0.25s after fixation (start time 0.25s) Figure 3.4: Left square properties on builder. Figure 3.5: Copying left square to create right square. 3. Cue appears 0.50s after box (start time 0.75s) Figure 3.6: Cue image properties on builder. 4. Target appears 0.10s after cue (start time 0.85s), target duration 2s or until response Figure 3.7: Go image properties on builder. 5. Record response key to end trial Figure 3.8: response key properties on builder. 3.1.3 Linking Excel to Builder using a loop Figure 3.9: Routine flow and loop on builder . 3.2 Adding practice trials For online experiments, it’s especially important to have practice trials to make sure your participants understand the task properly. Today we will be creating a practice trial that provides feedback after every trial, and doesn’t let the participant continue to the actual trial until they’ve gotten atleast 2 correct answer. We want to have our practice trial contain everything our real trial has. To accomplish this, we will copy and paste the entire routine using Menu –&gt; Copy Routine –&gt; Paste Routine. Name this routine something meaningful like practice. Figure 3.10: copying trial to create practice routine. Next we will create another routine called Feedback, which will tell the participant whether they got the trial correct or incorrect. This routine should be placed right after the practice trial. We will link these two routines to the conditional file using a loop. By setting the repetitions to a really large number, we make sure the loop continues on until we define when it breaks. Figure 3.11: creating feedback routine and linking everything to condition file. Let’s return back to the practice trial and add a custom code component to define when the loop breaks (when participants can exit out of the practice trial). Figure 3.12: code component for practice trial Figure 3.13: code component for feedback message Figure 3.14: text component to show feedback message "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
